function fft(input::Vector{Int}, n::Int)::Vector{Int}
    for i in 1:n
        input = fft(input)
    end
    return input
end

function fft(input::Vector{Int})::Vector{Int}
    output = Array{Int}(undef, length(input))
    base_pattern = [0, 1, 0, -1]
    for phase in eachindex(input)        
        pattern = collect(Iterators.drop(Iterators.take(Iterators.cycle(repeat(base_pattern, inner=phase)), length(input)+1),1))
        output[phase] = digits(abs(sum(pattern.*input)))[1]
    end
    return output
end

# input = reverse(digits(12345678))
# println(fft(input, 4))
# input = reverse(digits(80871224585914546619083218645595))
# println(fft(input, 100)[1:8])
# input = reverse(digits(19617804207202209144916044189917))
# println(fft(input, 100)[1:8])
# input = reverse(digits(69317163492948606335995924319873))
# println(fft(input, 100)[1:8])
input = reverse(digits(59762677844514231707968927042008409969419694517232887554478298452757853493727797530143429199414189647594938168529426160403829916419900898120019486915163598950118118387983556244981478390010010743564233546700525501778401179747909200321695327752871489034092824259484940223162317182126390835917821347817200000199661513570119976546997597685636902767647085231978254788567397815205001371476581059051537484714721063777591837624734411735276719972310946108792993253386343825492200871313132544437143522345753202438698221420628103468831032567529341170616724533679890049900700498413379538865945324121019550366835772552195421407346881595591791012185841146868209045))
println("Part 1: ", join(fft(input, 100)[1:8]))